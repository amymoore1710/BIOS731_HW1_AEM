results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_bootstrap_tI <- get_bootstrap_t_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_waldCI
sim_bootstrap_PI
sim_bootstrap_tI
get_waldCI_estimates <- function(model, beta_true, errors_true, alpha){
#Wald Interval
tidy(model, conf.int = TRUE, conf.level = 1 - alpha) %>%
filter(term == "x") %>%
mutate(coverage = ifelse(beta_true >= conf.low & beta_true <= conf.high, 1, 0)) %>%
rename(beta_hat = estimate) %>%
select(beta_hat, conf.low, conf.high, coverage)
}
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_waldCI
sim_bootstrap_PI
sim_bootstrap_tI
install.packages("tictoc")
library(broom)
library(tictoc)
source(here::here("functions", "02_fit_model.R"))
?tic()
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_waldCI
sim_waldCI$beta_hat
sim_waldCI$time
sim_waldCI$time <- 0.5764
sim_waldCI$time
sim_waldCI
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
sim_waldCI
timestamp()
##------ Mon Jan 27 13:13:59 2025 ------##
time_stamp
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
tic()
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
#for(i in 1:params$n_sim){
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_waldCI)
# sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
#                                                data = sim_data,
#                                                n = params$n,
#                                                beta_true = params$beta_true,
#                                                errors_true = params$errors_true,
#                                                alpha = alpha)
#
# sim_bootstrap_tI <- get_bootstrap_t_estimates(model = sim_model,
#                                               data = sim_data,
#                                               n = params$n,
#                                               beta_true = params$beta_true,
#                                               errors_true = params$errors_true,
#                                               alpha = alpha)
####################
# store results, including estimates, speed, parameter scenarios
#}
sim_waldCI
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
tic()
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
#for(i in 1:params$n_sim){
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_waldCI)
sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
model = sim_model
data = sim_data
n = params$n
beta_true = params$beta_true
errors_true = params$errors_true
alpha
time_start <- toc(quiet = TRUE) # start time
#Extract Beta Estimate from original sample
beta_hat <- get_beta_estimates(model)
#Number of bootstrap samples
#number of outer bootstrap resamples
B <- 1000
#numer of inner bootstrap resamples
K <- 500
#vectors to save bootstrap samples in
tstar_b <- rep(NA, B) #t stat
beta_hat_b <- rep(NA,B) #beta
#loop for outer bootstrap
for (b in 1:B) {
#sample with replacement
data_b <- data[sample(1:nrow(data), size = n, replace = TRUE),]
#fit model to bootstrap sample
model_b <- get_model_fit(data = data_b)
#extract beta estimate
beta_hat_b[[b]] <- get_beta_estimates(model_b)
#create a vector to save inner bootstrap
beta_hat_b_k <- rep(NA, K)
#inner bootstrap
for (k in 1:K) {
#sample with replacement from outer bootstrap sample
data_b_k <- data_b[sample(1:nrow(data_b), size = n, replace = TRUE),]
#fit model to bootstrap sample
model_b_k <- get_model_fit(data = data_b_k)
#extract beta estimate
beta_hat_b_k[[k]] <- get_beta_estimates(model_b_k)
}
#compute se as the sd of the inner bootstrap beta estimates
se_beta_hat_b <- sd(beta_hat_b_k)
#compute t for the outer bootstrap
tstar_b[[b]] <- (beta_hat_b[[b]] - beta_true)/se_beta_hat_b
}
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
tic()
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
tic()
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
model = sim_model
beta_true = params$beta_true
errors_true = params$errors_true
alpha = alpha
time_start <- toc(quiet = TRUE) #start time
time_start
estimates <- tidy(model, conf.int = TRUE, conf.level = 1 - alpha) %>%
filter(term == "x") %>%
mutate(coverage = ifelse(beta_true >= conf.low & beta_true <= conf.high, 1, 0)) %>%
rename(beta_hat = estimate, lower_CI = conf.low, upper_CI = conf.high) %>%
select(beta_hat, lower_CI, upper_CI, coverage)
time_end <- toc(quiet=TRUE) #end time
time_end
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
tic()
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
#for(i in 1:params$n_sim){
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_waldCI)
# sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
#                                                data = sim_data,
#                                                n = params$n,
#                                                beta_true = params$beta_true,
#                                                errors_true = params$errors_true,
#                                                alpha = alpha)
# print(sim_bootstrap_PI)
#
# sim_bootstrap_tI <- get_bootstrap_t_estimates(model = sim_model,
#                                               data = sim_data,
#                                               n = params$n,
#                                               beta_true = params$beta_true,
#                                               errors_true = params$errors_true,
#                                               alpha = alpha)
# print(sim_bootstrap_tI)
####################
# store results, including estimates, speed, parameter scenarios
#}
library(tidyverse)
knitr::opts_chunk$set(tidy = FALSE)
coverage <- 0.95
alpha <- 1 - coverage
MCE <- 0.01
nsim <- (coverage*(1-coverage))/(MCE^2)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
errors_true <- c("normal", "skewed")
params <- expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
errors_true = errors_true)
source(here::here("functions", "01_simulate_data.R"))
source(here::here("functions", "02_fit_model.R"))
source(here::here("functions", "03_extract_estimates.R"))
scenario <- 1
params <- params[scenario,]
set.seed(1222025) #to ensure that the seed list doesn't change on reruns
seed <- floor(runif(params$n_sim, 1, 10000))
results <- as.list(rep(NA, params$n_sim))
i <- 1
#for(i in 1:params$n_sim){
set.seed(seed[i])
####################
# simulate original data
sim_data <- get_simdata(n = params$n,
beta_treat = params$beta_true,
error = params$errors_true)
####################
# apply method(s)
sim_model <- get_model_fit(data = sim_data)
####################
# calculate estimates
sim_waldCI <- get_waldCI_estimates(model = sim_model,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_waldCI)
sim_bootstrap_PI <- get_bootstrap_PI_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_bootstrap_PI)
sim_bootstrap_tI <- get_bootstrap_t_estimates(model = sim_model,
data = sim_data,
n = params$n,
beta_true = params$beta_true,
errors_true = params$errors_true,
alpha = alpha)
print(sim_bootstrap_tI)
####################
# store results, including estimates, speed, parameter scenarios
#}
detectCores()
library(parallel)
detectCores()
